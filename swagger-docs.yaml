openapi: 3.0.0
info:
  title: Books API
  description: RESTful API для управления книгами с аутентификацией пользователей
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /users/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDto'
      responses:
        '201':
          description: Успешная регистрация пользователя
        '400':
          description: Некорректные данные пользователя
  /users/login:
    post:
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        '200':
          description: Успешный вход пользователя и возврат JWT токена
        '401':
          description: Неправильные учетные данные
  /books:
    get:
      summary: Получить список всех книг
      responses:
        '200':
          description: Успешный запрос, возвращает список книг
    post:
      summary: Добавить новую книгу
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
      responses:
        '201':
          description: Успешное создание книги
        '400':
          description: Некорректные данные книги
  /books/{id}:
    get:
      summary: Получить информацию о книге по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID книги
      responses:
        '200':
          description: Успешный запрос, возвращает информацию о книге
        '404':
          description: Книга не найдена
    put:
      summary: Обновить информацию о книге по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID книги
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
      responses:
        '200':
          description: Успешное обновление книги
        '404':
          description: Книга не найдена
    delete:
      summary: Удалить книгу по ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID книги
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное удаление книги
        '404':
          description: Книга не найдена

components:
  schemas:
    UserRegisterDto:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password
    UserLoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    BookDto:
      type: object
      properties:
        name:
          type: string
        author:
          type: string
        yearOfPublication:
          type: integer
        description:
          type: string
      required:
        - name
        - author
        - year
        - yearOfPublication
        - description
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
